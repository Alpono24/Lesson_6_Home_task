print("Lesson 6. Home task №9.")
"""9. Реализовать функцию, которая находит сумму элементов
матрицы (матрица M x N). Определить, какую долю в общей сумме
(процент) составляет сумма элементов каждого столбца.
"""

# from random import randint
# def create_matrix(m: int, n: int) -> list:
#     # Создаем пустой список (матрицу)
#     a = []
#     # Заполняем список (матрицу)
#     for i in range(0, m):
#     # Cоздаем первый ряд матрицы
#         a_n = []
#     # Наполняем случайными числами ряд матрицы
#         for j in range(0, n):
#             a_n.append(randint(x, y))
#     # Добавляем ряд в матрицу
#         a.append(a_n)
#     return a
#
# print(f"Введите данные о размере числовой матрицы Am*n, где m - количество строк, n - количество столбцов.")
# m = int(input(f"Введите число m - количество строк: "))
# n = int(input(f"Введите число n - количество столбцов: "))
# # print(f"Будет создана матрица Am*n порядка {m}x{n}.")
# x = int(input(f"Введите число x - нижний предел случайного числа для заполнения матрицы (создания элементов матрицы): "))
# y = int(input(f"Введите число y - верхний предел случайного числа для заполнения матрицы (создания элементов матрицы): "))
# print(f"Будет создана матрица Am*n порядка {m}x{n} с диапазоном случайных чисел [{x},{y}].")
# a_m_n = create_matrix(m, n)
# print("Созданная матрица: ",a_m_n)




#Можно (за)раскомментировать код выше и (рас)закомментировать матрицы a_m_n ниже. Тогда на расчет будет попадать матрица nm*n c рандомными числами!

# Исходная матрица для вычислений
a_m_n = [[1, 2, 3], [4, 5, 6], [7, 8, 9], [10, 11, 12]]
print("Исходная матрица для вычислений: ", a_m_n)

# Функция определения суммы элементов матрицы
def summa_all_el_and_column_and_percent(a_m_n):
    # Создаем пустой список для накопления элементов, для вычисления суммы элементов матрицы
    summa = 0
    for i in range(0, len(a_m_n)):
        for j in range(0, len(a_m_n[0])):
            summa += a_m_n[i][j]
    print(f"Сумма всех элементов данной матрицы составляет: {summa}")
    for i in range(0, len(a_m_n[0])):
    # Создаем списки для наполнения их элементами матрицы i-го ряда
        column_el_list = []
        for j in range(0, len(a_m_n)):
            column_el_list.append(a_m_n[j][i])
            summa_column_i = sum(column_el_list)
        print(
            f"Элементы матрицы в ряду №{i + 1}: {column_el_list}. Сумма элементов в ряду равна {summa_column_i}. Доля суммы элементов ряда к общей сумме элементов матрицы: {round(summa_column_i / summa * 100, 2)}%")

print(summa_all_el_and_column_and_percent(a_m_n))









# Код который сделал старый. Она на две функции. В итоге объединил две в одну!
#
# # Исходная матрица для вычислений
# # a_m_n = [[1, 2, 3], [4, 5, 6], [7, 8, 9], [10, 11, 12]]
# print("Исходная матрица для вычислений: ", a_m_n)
#
# # Функция определения суммы элементов матрицы
# def el_summa(a_m_n):
#     # Создаем пустой список для накопления элементов, для вычисления суммы элементов матрицы
#     summa = 0
#     for i in range(0, len(a_m_n)):
#         for j in range(0, len(a_m_n[0])):
#             summa += a_m_n[i][j]
#     return summa
#
# print("Сумма всех элементов данной матрицы составляет: ", el_summa(a_m_n))
#
# # Функция определения доли в общей сумме (процент) которую составляет сумма элементов каждого столбца
# def el_summa_column_and_percent(a_m_n):
#     for i in range(0, len(a_m_n[0])):
#         # Создаем списки для наполнения их элементами матрицы i-го ряда
#         column_el_list = []
#         for j in range(0, len(a_m_n)):
#             column_el_list.append(a_m_n[j][i])
#             summa_column_i = sum(column_el_list)
#         print(
#             f"Элементы матрицы в ряду №{i + 1}: {column_el_list}. Сумма элементов в ряду равна {summa_column_i}. Доля суммы элементов ряда к общей сумме элементов матрицы: {round(summa_column_i / el_summa(a_m_n) * 100, 2)}%")
#
# print(el_summa_column_and_percent(a_m_n))
